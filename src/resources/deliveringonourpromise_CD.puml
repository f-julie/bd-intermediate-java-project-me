@startuml

class GetPromiseHistoryByOrderIdActivity {
    - orderDao: ReadOnlyDao<String, Order>
    - promiseDao: ReadOnlyDao<String, List<Promise>>

    + getPromiseHistoryByOrderId(orderId: String): PromiseHistory
}

class OrderDao {
    - omaClient: OrderManipulationAuthorityClient

    + get(orderId: String): Order
    + convertToOrderItem(orderResultItem: OrderResultItem): OrderItem
}

class PromiseDao {
    - dpsClient: DeliveryPromiseServiceClient
    - omaClient: OrderManipulationAuthorityClient

    + get(customerOrderItemId: String): List<Promise>
    + getDeliveryDateForOrderItem(customerOrderItemId): ZonedDateTime
}

interface ReadOnlyDao {
    get(orderId: I): O
}

class DeliveryPromiseServiceClient {
    - dpService: DeliveryPromiseService

    + getDeliveryPromiseByOrderItemId(customerOrderItemId): Promise
}

class OrderManipulationAuthorityClient {
    - omaService: OrderManipulationAuthority

    + getCustomerOrderByOrderId(orderId: String): OrderResult
    + getCustomerOrderItemByOrderItemId(orderItemId: String): OrderResultItem
}

class PromiseHistoryClient {
    - getPromiseHistoryByOrderIdActivity: GetPromiseHistoryByOrderIdActivity

    + getPromiseHistoryByOrderId(orderId: String): PromiseHistory
}

class Order {
    + orderId: String
    + customerId: String
    + marketplaceId: String
    + condition: OrderCondition
    + customerOrderItemList: List<OrderItem>
    + shipOption: String
    + orderDate: ZonedDateTime

    + getOrderId(): String
    + getCustomerId(): String
    + getMarketplaceId(): String
    + getCondition(): OrderCondition
    + getCustomerOrderItemList(): List<OrderItem>
    + getShipOption(): String
    + getOrderDate(): ZonedDateTime
}

class OrderItem {
    - customerOrderItemId: String
    - orderId: String
    - asin: String
    - merchantId: String
    - quantity: int
    - title: String
    - isConfidenceTracked: boolean
    - confidence: int

    + getCustomerOrderItemId(): String
    + getOrderId(): String
    + getAsin(): String
    + getMerchantId(): String
    + getQuantity(): int
    + getTitle(): String
    + IsConfidenceTracked(): boolean
    + getConfidence(): int
}

class Promise {
    - customerOrderItemId: String
    - asin: String
    - active: boolean
    - promiseEffectiveDate: ZonedDateTime
    - promiseLatestArrivalDate: ZonedDateTime
    - promiseLatestShipDate: ZonedDateTime
    - deliveryDate: ZonedDateTime
    - promiseProvidedBy: String
    - confidence: int

    + setConfidence(isConfidenceTracked: boolean, trackedConfidence: int)
    + setDeliveryDate(deliveryDate: ZonedDateTime)
    + getCustomerOrderItemId(): String
    + getAsin(): String
    + getActive(): boolean
    + getPromiseEffectiveDate(): ZonedDateTime
    + getPromiseLatestArrivalDate(): ZonedDateTime
    + getPromiseLatestShipDate(): ZonedDateTime
    + getDeliveryDate(): ZonedDateTime
    + getPromiseProvidedBy(): String
    + getConfidence(): int
}

class PromiseHistory {
    - order: Order
    - promises: List<Promise>

    + addPromise(newPromise: Promise)
    + getOrder(): Order
    + getPromises(): List<Promise>
}

class App {
    + getPromiseHistoryClient(): PromiseHistoryClient
    + getPromiseHistoryByOrderIdActivity(): GetPromiseHistoryByOrderIdActivity
    + getOrderDao(): OrderDao
    + getPromiseDao(): PromiseDao
    + getOrderManipulationAuthorityClient(): OrderManipulationAuthorityClient
    + getDeliveryPromiseServiceClient(): DeliveryPromiseServiceClient
    + getOrderManipulationAuthority(): OrderManipulationAuthority
    + getDeliveryPromiseService(): DeliveryPromiseService
    + getOrderDatastore(): OrderDatastore
}

GetPromiseHistoryByOrderIdActivity --> ReadOnlyDao
GetPromiseHistoryByOrderIdActivity --> PromiseHistory
GetPromiseHistoryByOrderIdActivity --> OrderDao
GetPromiseHistoryByOrderIdActivity --> PromiseDao

OrderDao --> OrderManipulationAuthorityClient
OrderDao --> Order
OrderDao --> OrderItem
OrderDao ..|> ReadOnlyDao

PromiseDao --> DeliveryPromiseServiceClient
PromiseDao --> OrderManipulationAuthorityClient
PromiseDao --> Promise
PromiseDao --> OrderResultItem
PromiseDao --> OrderResult
PromiseDao ..|> ReadOnlyDao

DeliveryPromiseServiceClient --> Promise

PromiseHistoryClient --> GetPromiseHistoryByOrderIdActivity
PromiseHistoryClient --> PromiseHistory

Order --> OrderItem

PromiseHistory --> Order
PromiseHistory --> Promise

App --> PromiseHistoryClient
App --> GetPromiseHistoryByOrderIdActivity
App --> OrderDao
App --> PromiseDao
App --> OrderManipulationAuthorityClient
App --> DeliveryPromiseServiceClient

@enduml